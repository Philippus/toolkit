name: Publish toolkit

on:
  release:
    types: [published]

env:
  OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
  OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
  PGP_PASSWORD: ${{ secrets.PGP_PASSPHRASE }}

jobs:
  publish:
    name: Release toolkit and publish
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: coursier/cache-action@v6.3

      - name: Setup Scala CLI
        uses: VirtusLab/scala-cli-setup@main

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.PGP_SECRET }}
          passphrase: ${{ secrets.PGP_PASSPHRASE }}

      - name: Publish Toolkit for JVM
        run: for i in {1..5}; do scala-cli --power publish --cross Toolkit.scala publish-conf.scala --password env:OSSRH_PASSWORD --user env:OSSRH_USERNAME --gpg-key $PGP_KEY_ID --gpg-option --pinentry-mode --gpg-option loopback --gpg-option --passphrase --gpg-option $PGP_PASSWORD && break || sleep 15; done
        continue-on-error: true
        env:
          PGP_KEY_ID: ${{ steps.import_gpg.outputs.fingerprint }}

      - name: Publish Toolkit for native
        run: for i in {1..5}; do scala-cli --power publish --cross --native Toolkit.scala publish-conf.scala --password env:OSSRH_PASSWORD --user env:OSSRH_USERNAME --gpg-key $PGP_KEY_ID --gpg-option --pinentry-mode --gpg-option loopback --gpg-option --passphrase --gpg-option $PGP_PASSWORD && break || sleep 15; done
        continue-on-error: true
        env:
          PGP_KEY_ID: ${{ steps.import_gpg.outputs.fingerprint }}

      - name: Publish Toolkit for JS
        run: for i in {1..5}; do scala-cli --power publish --cross --js Toolkit.js.scala publish-conf.scala --password env:OSSRH_PASSWORD --user env:OSSRH_USERNAME --gpg-key $PGP_KEY_ID --gpg-option --pinentry-mode --gpg-option loopback --gpg-option --passphrase --gpg-option $PGP_PASSWORD && break || sleep 15; done
        continue-on-error: true
        env:
          PGP_KEY_ID: ${{ steps.import_gpg.outputs.fingerprint }}

      - name: Publish Toolkit Test for JVM
        run: for i in {1..5}; do scala-cli --power publish --cross ToolkitTest.scala publish-conf.scala --password env:OSSRH_PASSWORD --user env:OSSRH_USERNAME --gpg-key $PGP_KEY_ID --gpg-option --pinentry-mode --gpg-option loopback --gpg-option --passphrase --gpg-option $PGP_PASSWORD && break || sleep 15; done
        continue-on-error: true
        env:
          PGP_KEY_ID: ${{ steps.import_gpg.outputs.fingerprint }}
    
      - name: Publish Toolkit Test for native
        run: for i in {1..5}; do scala-cli --power publish --cross --native ToolkitTest.scala publish-conf.scala --password env:OSSRH_PASSWORD --user env:OSSRH_USERNAME --gpg-key $PGP_KEY_ID --gpg-option --pinentry-mode --gpg-option loopback --gpg-option --passphrase --gpg-option $PGP_PASSWORD && break || sleep 15; done
        continue-on-error: true
        env:
          PGP_KEY_ID: ${{ steps.import_gpg.outputs.fingerprint }}

      - name: Publish Toolkit Test for JS
        run: for i in {1..5}; do scala-cli --power publish --cross --js ToolkitTest.scala publish-conf.scala --password env:OSSRH_PASSWORD --user env:OSSRH_USERNAME --gpg-key $PGP_KEY_ID --gpg-option --pinentry-mode --gpg-option loopback --gpg-option --passphrase --gpg-option $PGP_PASSWORD && break || sleep 15; done
        continue-on-error: true
        env:
          PGP_KEY_ID: ${{ steps.import_gpg.outputs.fingerprint }}
